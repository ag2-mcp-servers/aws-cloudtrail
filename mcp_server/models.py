# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:06:41+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccountHasOngoingImportException(RootModel[Any]):
    root: Any


class AccountId(RootModel[constr(pattern=r'\d+', min_length=12, max_length=16)]):
    root: constr(pattern=r'\d+', min_length=12, max_length=16)


class AccountNotFoundException(RootModel[Any]):
    root: Any


class AccountNotRegisteredException(RootModel[Any]):
    root: Any


class AccountRegisteredException(RootModel[Any]):
    root: Any


class AddTagsResponse(BaseModel):
    pass


class Boolean(RootModel[bool]):
    root: bool


class ByteBuffer(RootModel[str]):
    root: str


class CannotDelegateManagementAccountException(RootModel[Any]):
    root: Any


class ChannelARNInvalidException(RootModel[Any]):
    root: Any


class ChannelAlreadyExistsException(RootModel[Any]):
    root: Any


class ChannelArn(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=3, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=3, max_length=256)


class ChannelExistsForEDSException(RootModel[Any]):
    root: Any


class ChannelMaxLimitExceededException(RootModel[Any]):
    root: Any


class ChannelName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._\-]+$', min_length=3, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._\-]+$', min_length=3, max_length=128)


class ChannelNotFoundException(RootModel[Any]):
    root: Any


class CloudTrailARNInvalidException(RootModel[Any]):
    root: Any


class CloudTrailAccessNotEnabledException(RootModel[Any]):
    root: Any


class CloudTrailInvalidClientTokenIdException(RootModel[Any]):
    root: Any


class CloudWatchLogsDeliveryUnavailableException(RootModel[Any]):
    root: Any


class ConflictException(RootModel[Any]):
    root: Any


class Date(RootModel[datetime]):
    root: datetime


class DelegatedAdminAccountLimitExceededException(RootModel[Any]):
    root: Any


class DeleteChannelRequest(BaseModel):
    Channel: ChannelArn


class DeleteChannelResponse(BaseModel):
    pass


class DeleteEventDataStoreResponse(BaseModel):
    pass


class DeleteResourcePolicyResponse(BaseModel):
    pass


class DeleteTrailResponse(BaseModel):
    pass


class DeliveryS3Uri(
    RootModel[
        constr(
            pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=1024
        )
    ]
):
    root: constr(
        pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=1024
    )


class DeliveryStatus(Enum):
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    FAILED_SIGNING_FILE = 'FAILED_SIGNING_FILE'
    PENDING = 'PENDING'
    RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND'
    ACCESS_DENIED = 'ACCESS_DENIED'
    ACCESS_DENIED_SIGNING_FILE = 'ACCESS_DENIED_SIGNING_FILE'
    CANCELLED = 'CANCELLED'
    UNKNOWN = 'UNKNOWN'


class DeregisterOrganizationDelegatedAdminRequest(BaseModel):
    DelegatedAdminAccountId: AccountId


class DeregisterOrganizationDelegatedAdminResponse(BaseModel):
    pass


class DestinationType(Enum):
    EVENT_DATA_STORE = 'EVENT_DATA_STORE'
    AWS_SERVICE = 'AWS_SERVICE'


class ErrorMessage(RootModel[constr(pattern=r'.*', min_length=4, max_length=1000)]):
    root: constr(pattern=r'.*', min_length=4, max_length=1000)


class EventCategory(Enum):
    insight = 'insight'


class EventDataStoreARNInvalidException(RootModel[Any]):
    root: Any


class EventDataStoreAlreadyExistsException(RootModel[Any]):
    root: Any


class EventDataStoreArn(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=3, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=3, max_length=256)


class EventDataStoreHasOngoingImportException(RootModel[Any]):
    root: Any


class EventDataStoreKmsKeyId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=1, max_length=350)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=1, max_length=350)


class EventDataStoreMaxLimitExceededException(RootModel[Any]):
    root: Any


class EventDataStoreName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._\-]+$', min_length=3, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._\-]+$', min_length=3, max_length=128)


class EventDataStoreNotFoundException(RootModel[Any]):
    root: Any


class EventDataStoreStatus(Enum):
    CREATED = 'CREATED'
    ENABLED = 'ENABLED'
    PENDING_DELETION = 'PENDING_DELETION'


class EventDataStoreTerminationProtectedException(RootModel[Any]):
    root: Any


class GetChannelRequest(BaseModel):
    Channel: ChannelArn


class GetEventDataStoreRequest(BaseModel):
    EventDataStore: EventDataStoreArn


class ImportDestinations(RootModel[List[EventDataStoreArn]]):
    root: List[EventDataStoreArn] = Field(..., max_length=1, min_length=1)


class ImportFailureStatus(Enum):
    FAILED = 'FAILED'
    RETRY = 'RETRY'
    SUCCEEDED = 'SUCCEEDED'


class ImportNotFoundException(RootModel[Any]):
    root: Any


class ImportStatus(Enum):
    INITIALIZING = 'INITIALIZING'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    STOPPED = 'STOPPED'
    COMPLETED = 'COMPLETED'


class InactiveEventDataStoreException(RootModel[Any]):
    root: Any


class InactiveQueryException(RootModel[Any]):
    root: Any


class InsightNotEnabledException(RootModel[Any]):
    root: Any


class InsightType(Enum):
    ApiCallRateInsight = 'ApiCallRateInsight'
    ApiErrorRateInsight = 'ApiErrorRateInsight'


class InsufficientDependencyServiceAccessPermissionException(RootModel[Any]):
    root: Any


class InsufficientEncryptionPolicyException(RootModel[Any]):
    root: Any


class InsufficientS3BucketPolicyException(RootModel[Any]):
    root: Any


class InsufficientSnsTopicPolicyException(RootModel[Any]):
    root: Any


class Integer(RootModel[int]):
    root: int


class InvalidCloudWatchLogsLogGroupArnException(RootModel[Any]):
    root: Any


class InvalidCloudWatchLogsRoleArnException(RootModel[Any]):
    root: Any


class InvalidDateRangeException(RootModel[Any]):
    root: Any


class InvalidEventCategoryException(RootModel[Any]):
    root: Any


class InvalidEventDataStoreCategoryException(RootModel[Any]):
    root: Any


class InvalidEventDataStoreStatusException(RootModel[Any]):
    root: Any


class InvalidEventSelectorsException(RootModel[Any]):
    root: Any


class InvalidHomeRegionException(RootModel[Any]):
    root: Any


class InvalidImportSourceException(RootModel[Any]):
    root: Any


class InvalidInsightSelectorsException(RootModel[Any]):
    root: Any


class InvalidKmsKeyIdException(RootModel[Any]):
    root: Any


class InvalidLookupAttributesException(RootModel[Any]):
    root: Any


class InvalidMaxResultsException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidParameterCombinationException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidQueryStatementException(RootModel[Any]):
    root: Any


class InvalidQueryStatusException(RootModel[Any]):
    root: Any


class InvalidS3BucketNameException(RootModel[Any]):
    root: Any


class InvalidS3PrefixException(RootModel[Any]):
    root: Any


class InvalidSnsTopicNameException(RootModel[Any]):
    root: Any


class InvalidSourceException(RootModel[Any]):
    root: Any


class InvalidTagParameterException(RootModel[Any]):
    root: Any


class InvalidTimeRangeException(RootModel[Any]):
    root: Any


class InvalidTokenException(RootModel[Any]):
    root: Any


class InvalidTrailNameException(RootModel[Any]):
    root: Any


class KmsException(RootModel[Any]):
    root: Any


class KmsKeyDisabledException(RootModel[Any]):
    root: Any


class KmsKeyNotFoundException(RootModel[Any]):
    root: Any


class ListChannelsMaxResultsCount(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class ListEventDataStoresMaxResultsCount(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class ListImportFailuresMaxResultsCount(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class ListImportsMaxResultsCount(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class ListQueriesMaxResultsCount(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class Location(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=3, max_length=1024)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=3, max_length=1024)


class Long(RootModel[int]):
    root: int


class LookupAttributeKey(Enum):
    EventId = 'EventId'
    EventName = 'EventName'
    ReadOnly = 'ReadOnly'
    Username = 'Username'
    ResourceType = 'ResourceType'
    ResourceName = 'ResourceName'
    EventSource = 'EventSource'
    AccessKeyId = 'AccessKeyId'


class LookupAttributeValue(RootModel[constr(min_length=1, max_length=2000)]):
    root: constr(min_length=1, max_length=2000)


class MaxConcurrentQueriesException(RootModel[Any]):
    root: Any


class MaxQueryResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class MaximumNumberOfTrailsExceededException(RootModel[Any]):
    root: Any


class NextToken(RootModel[str]):
    root: str


class NoManagementAccountSLRExistsException(RootModel[Any]):
    root: Any


class NotOrganizationManagementAccountException(RootModel[Any]):
    root: Any


class NotOrganizationMasterAccountException(RootModel[Any]):
    root: Any


class OperationNotPermittedException(RootModel[Any]):
    root: Any


class OperatorValue(RootModel[constr(pattern=r'.+', min_length=1, max_length=2048)]):
    root: constr(pattern=r'.+', min_length=1, max_length=2048)


class OrganizationNotInAllFeaturesModeException(RootModel[Any]):
    root: Any


class OrganizationsNotInUseException(RootModel[Any]):
    root: Any


class PaginationToken(RootModel[constr(pattern=r'.*', min_length=4, max_length=1000)]):
    root: constr(pattern=r'.*', min_length=4, max_length=1000)


class QueryIdNotFoundException(RootModel[Any]):
    root: Any


class QueryResultKey(RootModel[str]):
    root: str


class QueryResultValue(RootModel[str]):
    root: str


class QueryStatement(
    RootModel[constr(pattern=r'\(\?s\).*', min_length=1, max_length=10000)]
):
    root: constr(pattern=r'\(\?s\).*', min_length=1, max_length=10000)


class QueryStatistics(BaseModel):
    BytesScanned: Optional[Long] = None
    ResultsCount: Optional[Integer] = None
    TotalResultsCount: Optional[Integer] = None


class QueryStatisticsForDescribeQuery(BaseModel):
    BytesScanned: Optional[Long] = None
    CreationTime: Optional[Date] = None
    EventsMatched: Optional[Long] = None
    EventsScanned: Optional[Long] = None
    ExecutionTimeInMillis: Optional[Integer] = None


class QueryStatus(Enum):
    QUEUED = 'QUEUED'
    RUNNING = 'RUNNING'
    FINISHED = 'FINISHED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'
    TIMED_OUT = 'TIMED_OUT'


class ReadWriteType(Enum):
    ReadOnly = 'ReadOnly'
    WriteOnly = 'WriteOnly'
    All = 'All'


class RegisterOrganizationDelegatedAdminRequest(BaseModel):
    MemberAccountId: AccountId


class RegisterOrganizationDelegatedAdminResponse(BaseModel):
    pass


class RemoveTagsResponse(BaseModel):
    pass


class ResourceARNNotValidException(RootModel[Any]):
    root: Any


class ResourceArn(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=3, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._/\-:]+$', min_length=3, max_length=256)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourcePolicy(RootModel[constr(min_length=1, max_length=8192)]):
    root: constr(min_length=1, max_length=8192)


class ResourcePolicyNotFoundException(RootModel[Any]):
    root: Any


class ResourcePolicyNotValidException(RootModel[Any]):
    root: Any


class ResourceTypeNotSupportedException(RootModel[Any]):
    root: Any


class RestoreEventDataStoreRequest(BaseModel):
    EventDataStore: EventDataStoreArn


class RetentionPeriod(RootModel[conint(ge=7, le=2557)]):
    root: conint(ge=7, le=2557)


class S3BucketDoesNotExistException(RootModel[Any]):
    root: Any


class SelectorField(
    RootModel[constr(pattern=r'[\w|\d|\.|_]+', min_length=1, max_length=1000)]
):
    root: constr(pattern=r'[\w|\d|\.|_]+', min_length=1, max_length=1000)


class SelectorName(RootModel[constr(pattern=r'.*', min_length=0, max_length=1000)]):
    root: constr(pattern=r'.*', min_length=0, max_length=1000)


class Source(RootModel[constr(pattern=r'.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*', min_length=1, max_length=256)


class StartLoggingResponse(BaseModel):
    pass


class StartQueryRequest(BaseModel):
    DeliveryS3Uri_1: Optional[DeliveryS3Uri] = Field(None, alias='DeliveryS3Uri')
    QueryStatement_1: QueryStatement = Field(..., alias='QueryStatement')


class StopLoggingResponse(BaseModel):
    pass


class String(RootModel[str]):
    root: str


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class TagsLimitExceededException(RootModel[Any]):
    root: Any


class TerminationProtectionEnabled(RootModel[bool]):
    root: bool


class Trail(BaseModel):
    CloudWatchLogsLogGroupArn: Optional[String] = None
    CloudWatchLogsRoleArn: Optional[String] = None
    HasCustomEventSelectors: Optional[Boolean] = None
    HasInsightSelectors: Optional[Boolean] = None
    HomeRegion: Optional[String] = None
    IncludeGlobalServiceEvents: Optional[Boolean] = None
    IsMultiRegionTrail: Optional[Boolean] = None
    IsOrganizationTrail: Optional[Boolean] = None
    KmsKeyId: Optional[String] = None
    LogFileValidationEnabled: Optional[Boolean] = None
    Name: Optional[String] = None
    S3BucketName: Optional[String] = None
    S3KeyPrefix: Optional[String] = None
    SnsTopicARN: Optional[String] = None
    SnsTopicName: Optional[String] = None
    TrailARN: Optional[String] = None


class TrailAlreadyExistsException(RootModel[Any]):
    root: Any


class TrailInfo(BaseModel):
    HomeRegion: Optional[String] = None
    Name: Optional[String] = None
    TrailARN: Optional[String] = None


class TrailList(RootModel[List[Trail]]):
    root: List[Trail]


class TrailNameList(RootModel[List[String]]):
    root: List[String]


class TrailNotFoundException(RootModel[Any]):
    root: Any


class TrailNotProvidedException(RootModel[Any]):
    root: Any


class Trails(RootModel[List[TrailInfo]]):
    root: List[TrailInfo]


class UUID(RootModel[constr(pattern=r'^[a-f0-9\-]+$', min_length=36, max_length=36)]):
    root: constr(pattern=r'^[a-f0-9\-]+$', min_length=36, max_length=36)


class UnsupportedOperationException(RootModel[Any]):
    root: Any


class UpdateTrailRequest(BaseModel):
    CloudWatchLogsLogGroupArn: Optional[String] = None
    CloudWatchLogsRoleArn: Optional[String] = None
    EnableLogFileValidation: Optional[Boolean] = None
    IncludeGlobalServiceEvents: Optional[Boolean] = None
    IsMultiRegionTrail: Optional[Boolean] = None
    IsOrganizationTrail: Optional[Boolean] = None
    KmsKeyId: Optional[String] = None
    Name: String
    S3BucketName: Optional[String] = None
    S3KeyPrefix: Optional[String] = None
    SnsTopicName: Optional[String] = None


class UpdateTrailResponse(BaseModel):
    CloudWatchLogsLogGroupArn: Optional[String] = None
    CloudWatchLogsRoleArn: Optional[String] = None
    IncludeGlobalServiceEvents: Optional[Boolean] = None
    IsMultiRegionTrail: Optional[Boolean] = None
    IsOrganizationTrail: Optional[Boolean] = None
    KmsKeyId: Optional[String] = None
    LogFileValidationEnabled: Optional[Boolean] = None
    Name: Optional[String] = None
    S3BucketName: Optional[String] = None
    S3KeyPrefix: Optional[String] = None
    SnsTopicARN: Optional[String] = None
    SnsTopicName: Optional[String] = None
    TrailARN: Optional[String] = None


class XAmzTarget(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_AddTags = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.AddTags'
    )


class XAmzTarget1(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_CancelQuery = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CancelQuery'
    )


class XAmzTarget2(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_CreateChannel = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CreateChannel'
    )


class XAmzTarget3(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_CreateEventDataStore = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CreateEventDataStore'
    )


class XAmzTarget4(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_CreateTrail = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CreateTrail'
    )


class XAmzTarget5(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_DeleteChannel = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteChannel'
    )


class XAmzTarget6(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_DeleteEventDataStore = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteEventDataStore'
    )


class XAmzTarget7(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_DeleteResourcePolicy = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteResourcePolicy'
    )


class XAmzTarget8(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_DeleteTrail = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteTrail'
    )


class XAmzTarget9(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_DeregisterOrganizationDelegatedAdmin = 'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeregisterOrganizationDelegatedAdmin'


class XAmzTarget10(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_DescribeQuery = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DescribeQuery'
    )


class XAmzTarget11(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_DescribeTrails = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DescribeTrails'
    )


class XAmzTarget12(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_GetChannel = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetChannel'
    )


class XAmzTarget13(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_GetEventDataStore = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetEventDataStore'
    )


class XAmzTarget14(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_GetEventSelectors = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetEventSelectors'
    )


class XAmzTarget15(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_GetImport = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetImport'
    )


class XAmzTarget16(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_GetInsightSelectors = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetInsightSelectors'
    )


class XAmzTarget17(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_GetQueryResults = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetQueryResults'
    )


class XAmzTarget18(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_GetResourcePolicy = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetResourcePolicy'
    )


class XAmzTarget19(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_GetTrail = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetTrail'
    )


class XAmzTarget20(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_GetTrailStatus = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetTrailStatus'
    )


class XAmzTarget21(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_ListChannels = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListChannels'
    )


class XAmzTarget22(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_ListEventDataStores = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListEventDataStores'
    )


class XAmzTarget23(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_ListImportFailures = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListImportFailures'
    )


class XAmzTarget24(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_ListImports = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListImports'
    )


class XAmzTarget25(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_ListPublicKeys = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListPublicKeys'
    )


class XAmzTarget26(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_ListQueries = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListQueries'
    )


class XAmzTarget27(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_ListTags = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListTags'
    )


class XAmzTarget28(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_ListTrails = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListTrails'
    )


class XAmzTarget29(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_LookupEvents = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.LookupEvents'
    )


class XAmzTarget30(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_PutEventSelectors = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.PutEventSelectors'
    )


class XAmzTarget31(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_PutInsightSelectors = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.PutInsightSelectors'
    )


class XAmzTarget32(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_PutResourcePolicy = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.PutResourcePolicy'
    )


class XAmzTarget33(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_RegisterOrganizationDelegatedAdmin = 'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RegisterOrganizationDelegatedAdmin'


class XAmzTarget34(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_RemoveTags = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RemoveTags'
    )


class XAmzTarget35(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_RestoreEventDataStore = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RestoreEventDataStore'
    )


class XAmzTarget36(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_StartImport = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartImport'
    )


class XAmzTarget37(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_StartLogging = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartLogging'
    )


class XAmzTarget38(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_StartQuery = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartQuery'
    )


class XAmzTarget39(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_StopImport = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StopImport'
    )


class XAmzTarget40(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_StopLogging = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StopLogging'
    )


class XAmzTarget41(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_UpdateChannel = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.UpdateChannel'
    )


class XAmzTarget42(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_UpdateEventDataStore = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.UpdateEventDataStore'
    )


class XAmzTarget43(Enum):
    com_amazonaws_cloudtrail_v20131101_CloudTrail_20131101_UpdateTrail = (
        'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.UpdateTrail'
    )


class CancelQueryRequest(BaseModel):
    EventDataStore: Optional[EventDataStoreArn] = None
    QueryId: UUID


class CancelQueryResponse(BaseModel):
    QueryId: UUID
    QueryStatus_1: QueryStatus = Field(..., alias='QueryStatus')


class Channel(BaseModel):
    ChannelArn_1: Optional[ChannelArn] = Field(None, alias='ChannelArn')
    Name: Optional[ChannelName] = None


class Channels(RootModel[List[Channel]]):
    root: List[Channel]


class CreateTrailResponse(BaseModel):
    CloudWatchLogsLogGroupArn: Optional[String] = None
    CloudWatchLogsRoleArn: Optional[String] = None
    IncludeGlobalServiceEvents: Optional[Boolean] = None
    IsMultiRegionTrail: Optional[Boolean] = None
    IsOrganizationTrail: Optional[Boolean] = None
    KmsKeyId: Optional[String] = None
    LogFileValidationEnabled: Optional[Boolean] = None
    Name: Optional[String] = None
    S3BucketName: Optional[String] = None
    S3KeyPrefix: Optional[String] = None
    SnsTopicARN: Optional[String] = None
    SnsTopicName: Optional[String] = None
    TrailARN: Optional[String] = None


class DataResourceValues(RootModel[List[String]]):
    root: List[String]


class DeleteEventDataStoreRequest(BaseModel):
    EventDataStore: EventDataStoreArn


class DeleteResourcePolicyRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class DeleteTrailRequest(BaseModel):
    Name: String


class DescribeQueryRequest(BaseModel):
    EventDataStore: Optional[EventDataStoreArn] = None
    QueryId: UUID


class DescribeQueryResponse(BaseModel):
    DeliveryS3Uri_1: Optional[DeliveryS3Uri] = Field(None, alias='DeliveryS3Uri')
    DeliveryStatus_1: Optional[DeliveryStatus] = Field(None, alias='DeliveryStatus')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    QueryId: Optional[UUID] = None
    QueryStatistics: Optional[QueryStatisticsForDescribeQuery] = None
    QueryStatus_1: Optional[QueryStatus] = Field(None, alias='QueryStatus')
    QueryString: Optional[QueryStatement] = None


class DescribeTrailsRequest(BaseModel):
    includeShadowTrails: Optional[Boolean] = None
    trailNameList: Optional[TrailNameList] = None


class DescribeTrailsResponse(BaseModel):
    trailList: Optional[TrailList] = None


class Destination(BaseModel):
    Location_1: Location = Field(..., alias='Location')
    Type: DestinationType


class Destinations(RootModel[List[Destination]]):
    root: List[Destination] = Field(..., max_length=200, min_length=1)


class ExcludeManagementEventSources(RootModel[List[String]]):
    root: List[String]


class GetEventSelectorsRequest(BaseModel):
    TrailName: String


class GetImportRequest(BaseModel):
    ImportId: UUID


class GetInsightSelectorsRequest(BaseModel):
    TrailName: String


class GetQueryResultsRequest(BaseModel):
    EventDataStore: Optional[EventDataStoreArn] = None
    MaxQueryResults_1: Optional[MaxQueryResults] = Field(None, alias='MaxQueryResults')
    NextToken: Optional[PaginationToken] = None
    QueryId: UUID


class GetResourcePolicyRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class GetResourcePolicyResponse(BaseModel):
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')
    ResourcePolicy_1: Optional[ResourcePolicy] = Field(None, alias='ResourcePolicy')


class GetTrailRequest(BaseModel):
    Name: String


class GetTrailResponse(BaseModel):
    Trail_1: Optional[Trail] = Field(None, alias='Trail')


class GetTrailStatusRequest(BaseModel):
    Name: String


class GetTrailStatusResponse(BaseModel):
    IsLogging: Optional[Boolean] = None
    LatestCloudWatchLogsDeliveryError: Optional[String] = None
    LatestCloudWatchLogsDeliveryTime: Optional[Date] = None
    LatestDeliveryAttemptSucceeded: Optional[String] = None
    LatestDeliveryAttemptTime: Optional[String] = None
    LatestDeliveryError: Optional[String] = None
    LatestDeliveryTime: Optional[Date] = None
    LatestDigestDeliveryError: Optional[String] = None
    LatestDigestDeliveryTime: Optional[Date] = None
    LatestNotificationAttemptSucceeded: Optional[String] = None
    LatestNotificationAttemptTime: Optional[String] = None
    LatestNotificationError: Optional[String] = None
    LatestNotificationTime: Optional[Date] = None
    StartLoggingTime: Optional[Date] = None
    StopLoggingTime: Optional[Date] = None
    TimeLoggingStarted: Optional[String] = None
    TimeLoggingStopped: Optional[String] = None


class ImportFailureListItem(BaseModel):
    ErrorMessage: Optional[String] = None
    ErrorType: Optional[String] = None
    LastUpdatedTime: Optional[Date] = None
    Location: Optional[String] = None
    Status: Optional[ImportFailureStatus] = None


class ImportStatistics(BaseModel):
    EventsCompleted: Optional[Long] = None
    FailedEntries: Optional[Long] = None
    FilesCompleted: Optional[Long] = None
    PrefixesCompleted: Optional[Long] = None
    PrefixesFound: Optional[Long] = None


class ImportsListItem(BaseModel):
    CreatedTimestamp: Optional[Date] = None
    Destinations: Optional[ImportDestinations] = None
    ImportId: Optional[UUID] = None
    ImportStatus_1: Optional[ImportStatus] = Field(None, alias='ImportStatus')
    UpdatedTimestamp: Optional[Date] = None


class IngestionStatus(BaseModel):
    LatestIngestionAttemptEventID: Optional[UUID] = None
    LatestIngestionAttemptTime: Optional[Date] = None
    LatestIngestionErrorCode: Optional[ErrorMessage] = None
    LatestIngestionSuccessEventID: Optional[UUID] = None
    LatestIngestionSuccessTime: Optional[Date] = None


class InsightSelector(BaseModel):
    InsightType_1: Optional[InsightType] = Field(None, alias='InsightType')


class InsightSelectors(RootModel[List[InsightSelector]]):
    root: List[InsightSelector]


class ListChannelsRequest(BaseModel):
    MaxResults: Optional[ListChannelsMaxResultsCount] = None
    NextToken: Optional[PaginationToken] = None


class ListChannelsResponse(BaseModel):
    Channels_1: Optional[Channels] = Field(None, alias='Channels')
    NextToken: Optional[PaginationToken] = None


class ListEventDataStoresRequest(BaseModel):
    MaxResults: Optional[ListEventDataStoresMaxResultsCount] = None
    NextToken: Optional[PaginationToken] = None


class ListImportFailuresRequest(BaseModel):
    ImportId: UUID
    MaxResults: Optional[ListImportFailuresMaxResultsCount] = None
    NextToken: Optional[PaginationToken] = None


class ListImportsRequest(BaseModel):
    Destination: Optional[EventDataStoreArn] = None
    ImportStatus_1: Optional[ImportStatus] = Field(None, alias='ImportStatus')
    MaxResults: Optional[ListImportsMaxResultsCount] = None
    NextToken: Optional[PaginationToken] = None


class ListPublicKeysRequest(BaseModel):
    EndTime: Optional[Date] = None
    NextToken: Optional[String] = None
    StartTime: Optional[Date] = None


class ListQueriesRequest(BaseModel):
    EndTime: Optional[Date] = None
    EventDataStore: EventDataStoreArn
    MaxResults: Optional[ListQueriesMaxResultsCount] = None
    NextToken: Optional[PaginationToken] = None
    QueryStatus_1: Optional[QueryStatus] = Field(None, alias='QueryStatus')
    StartTime: Optional[Date] = None


class ListTrailsRequest(BaseModel):
    NextToken: Optional[String] = None


class ListTrailsResponse(BaseModel):
    NextToken: Optional[String] = None
    Trails_1: Optional[Trails] = Field(None, alias='Trails')


class LookupAttribute(BaseModel):
    AttributeKey: LookupAttributeKey
    AttributeValue: LookupAttributeValue


class LookupAttributesList(RootModel[List[LookupAttribute]]):
    root: List[LookupAttribute]


class LookupEventsRequest(BaseModel):
    EndTime: Optional[Date] = None
    EventCategory_1: Optional[EventCategory] = Field(None, alias='EventCategory')
    LookupAttributes: Optional[LookupAttributesList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StartTime: Optional[Date] = None


class Operator(RootModel[List[OperatorValue]]):
    root: List[OperatorValue] = Field(..., min_length=1)


class PublicKey(BaseModel):
    Fingerprint: Optional[String] = None
    ValidityEndTime: Optional[Date] = None
    ValidityStartTime: Optional[Date] = None
    Value: Optional[ByteBuffer] = None


class PublicKeyList(RootModel[List[PublicKey]]):
    root: List[PublicKey]


class PutInsightSelectorsRequest(BaseModel):
    InsightSelectors_1: InsightSelectors = Field(..., alias='InsightSelectors')
    TrailName: String


class PutInsightSelectorsResponse(BaseModel):
    InsightSelectors_1: Optional[InsightSelectors] = Field(
        None, alias='InsightSelectors'
    )
    TrailARN: Optional[String] = None


class PutResourcePolicyRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    ResourcePolicy_1: ResourcePolicy = Field(..., alias='ResourcePolicy')


class PutResourcePolicyResponse(BaseModel):
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')
    ResourcePolicy_1: Optional[ResourcePolicy] = Field(None, alias='ResourcePolicy')


class Query(BaseModel):
    CreationTime: Optional[Date] = None
    QueryId: Optional[UUID] = None
    QueryStatus_1: Optional[QueryStatus] = Field(None, alias='QueryStatus')


class QueryResultColumn(RootModel[Optional[Dict[str, QueryResultValue]]]):
    root: Optional[Dict[str, QueryResultValue]] = None


class QueryResultRow(RootModel[List[QueryResultColumn]]):
    root: List[QueryResultColumn]


class QueryResultRows(RootModel[List[QueryResultRow]]):
    root: List[QueryResultRow]


class Resource(BaseModel):
    ResourceName: Optional[String] = None
    ResourceType: Optional[String] = None


class ResourceIdList(RootModel[List[String]]):
    root: List[String]


class ResourceList(RootModel[List[Resource]]):
    root: List[Resource] = Field(
        ..., description='A list of resources referenced by the event returned.'
    )


class S3ImportSource(BaseModel):
    S3BucketAccessRoleArn: String
    S3BucketRegion: String
    S3LocationUri: String


class StartLoggingRequest(BaseModel):
    Name: String


class StartQueryResponse(BaseModel):
    QueryId: Optional[UUID] = None


class StopImportRequest(BaseModel):
    ImportId: UUID


class StopLoggingRequest(BaseModel):
    Name: String


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TagsList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., description='A list of tags.', max_length=200)


class UpdateChannelRequest(BaseModel):
    Channel: ChannelArn
    Destinations_1: Optional[Destinations] = Field(None, alias='Destinations')
    Name: Optional[ChannelName] = None


class UpdateChannelResponse(BaseModel):
    ChannelArn_1: Optional[ChannelArn] = Field(None, alias='ChannelArn')
    Destinations_1: Optional[Destinations] = Field(None, alias='Destinations')
    Name: Optional[ChannelName] = None
    Source_1: Optional[Source] = Field(None, alias='Source')


class AddTagsRequest(BaseModel):
    ResourceId: String
    TagsList_1: TagsList = Field(..., alias='TagsList')


class AdvancedFieldSelector(BaseModel):
    EndsWith: Optional[Operator] = None
    Equals: Optional[Operator] = None
    Field: SelectorField
    NotEndsWith: Optional[Operator] = None
    NotEquals: Optional[Operator] = None
    NotStartsWith: Optional[Operator] = None
    StartsWith: Optional[Operator] = None


class AdvancedFieldSelectors(RootModel[List[AdvancedFieldSelector]]):
    root: List[AdvancedFieldSelector] = Field(..., min_length=1)


class CreateChannelRequest(BaseModel):
    Destinations_1: Destinations = Field(..., alias='Destinations')
    Name: ChannelName
    Source_1: Source = Field(..., alias='Source')
    Tags: Optional[TagsList] = None


class CreateChannelResponse(BaseModel):
    ChannelArn_1: Optional[ChannelArn] = Field(None, alias='ChannelArn')
    Destinations_1: Optional[Destinations] = Field(None, alias='Destinations')
    Name: Optional[ChannelName] = None
    Source_1: Optional[Source] = Field(None, alias='Source')
    Tags: Optional[TagsList] = None


class CreateTrailRequest(BaseModel):
    CloudWatchLogsLogGroupArn: Optional[String] = None
    CloudWatchLogsRoleArn: Optional[String] = None
    EnableLogFileValidation: Optional[Boolean] = None
    IncludeGlobalServiceEvents: Optional[Boolean] = None
    IsMultiRegionTrail: Optional[Boolean] = None
    IsOrganizationTrail: Optional[Boolean] = None
    KmsKeyId: Optional[String] = None
    Name: String
    S3BucketName: String
    S3KeyPrefix: Optional[String] = None
    SnsTopicName: Optional[String] = None
    TagsList_1: Optional[TagsList] = Field(None, alias='TagsList')


class DataResource(BaseModel):
    Type: Optional[String] = None
    Values: Optional[DataResourceValues] = None


class DataResources(RootModel[List[DataResource]]):
    root: List[DataResource]


class Event(BaseModel):
    AccessKeyId: Optional[String] = None
    CloudTrailEvent: Optional[String] = None
    EventId: Optional[String] = None
    EventName: Optional[String] = None
    EventSource: Optional[String] = None
    EventTime: Optional[Date] = None
    ReadOnly: Optional[String] = None
    Resources: Optional[ResourceList] = None
    Username: Optional[String] = None


class EventSelector(BaseModel):
    DataResources_1: Optional[DataResources] = Field(None, alias='DataResources')
    ExcludeManagementEventSources_1: Optional[ExcludeManagementEventSources] = Field(
        None, alias='ExcludeManagementEventSources'
    )
    IncludeManagementEvents: Optional[Boolean] = None
    ReadWriteType_1: Optional[ReadWriteType] = Field(None, alias='ReadWriteType')


class EventSelectors(RootModel[List[EventSelector]]):
    root: List[EventSelector]


class EventsList(RootModel[List[Event]]):
    root: List[Event]


class GetInsightSelectorsResponse(BaseModel):
    InsightSelectors_1: Optional[InsightSelectors] = Field(
        None, alias='InsightSelectors'
    )
    TrailARN: Optional[String] = None


class GetQueryResultsResponse(BaseModel):
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    NextToken: Optional[PaginationToken] = None
    QueryResultRows_1: Optional[QueryResultRows] = Field(None, alias='QueryResultRows')
    QueryStatistics_1: Optional[QueryStatistics] = Field(None, alias='QueryStatistics')
    QueryStatus_1: Optional[QueryStatus] = Field(None, alias='QueryStatus')


class ImportFailureList(RootModel[List[ImportFailureListItem]]):
    root: List[ImportFailureListItem]


class ImportSource(BaseModel):
    S3: S3ImportSource


class ImportsList(RootModel[List[ImportsListItem]]):
    root: List[ImportsListItem]


class ListImportFailuresResponse(BaseModel):
    Failures: Optional[ImportFailureList] = None
    NextToken: Optional[PaginationToken] = None


class ListImportsResponse(BaseModel):
    Imports: Optional[ImportsList] = None
    NextToken: Optional[PaginationToken] = None


class ListPublicKeysResponse(BaseModel):
    NextToken: Optional[String] = None
    PublicKeyList_1: Optional[PublicKeyList] = Field(None, alias='PublicKeyList')


class ListTagsRequest(BaseModel):
    NextToken: Optional[String] = None
    ResourceIdList_1: ResourceIdList = Field(..., alias='ResourceIdList')


class LookupEventsResponse(BaseModel):
    Events: Optional[EventsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class Queries(RootModel[List[Query]]):
    root: List[Query]


class RemoveTagsRequest(BaseModel):
    ResourceId: String
    TagsList_1: TagsList = Field(..., alias='TagsList')


class ResourceTag(BaseModel):
    ResourceId: Optional[String] = None
    TagsList_1: Optional[TagsList] = Field(None, alias='TagsList')


class ResourceTagList(RootModel[List[ResourceTag]]):
    root: List[ResourceTag]


class StartImportRequest(BaseModel):
    Destinations: Optional[ImportDestinations] = None
    EndEventTime: Optional[Date] = None
    ImportId: Optional[UUID] = None
    ImportSource_1: Optional[ImportSource] = Field(None, alias='ImportSource')
    StartEventTime: Optional[Date] = None


class StartImportResponse(BaseModel):
    CreatedTimestamp: Optional[Date] = None
    Destinations: Optional[ImportDestinations] = None
    EndEventTime: Optional[Date] = None
    ImportId: Optional[UUID] = None
    ImportSource_1: Optional[ImportSource] = Field(None, alias='ImportSource')
    ImportStatus_1: Optional[ImportStatus] = Field(None, alias='ImportStatus')
    StartEventTime: Optional[Date] = None
    UpdatedTimestamp: Optional[Date] = None


class StopImportResponse(BaseModel):
    CreatedTimestamp: Optional[Date] = None
    Destinations: Optional[ImportDestinations] = None
    EndEventTime: Optional[Date] = None
    ImportId: Optional[UUID] = None
    ImportSource_1: Optional[ImportSource] = Field(None, alias='ImportSource')
    ImportStatistics_1: Optional[ImportStatistics] = Field(
        None, alias='ImportStatistics'
    )
    ImportStatus_1: Optional[ImportStatus] = Field(None, alias='ImportStatus')
    StartEventTime: Optional[Date] = None
    UpdatedTimestamp: Optional[Date] = None


class AdvancedEventSelector(BaseModel):
    FieldSelectors: AdvancedFieldSelectors
    Name: Optional[SelectorName] = None


class AdvancedEventSelectors(RootModel[List[AdvancedEventSelector]]):
    root: List[AdvancedEventSelector]


class CreateEventDataStoreRequest(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    KmsKeyId: Optional[EventDataStoreKmsKeyId] = None
    MultiRegionEnabled: Optional[Boolean] = None
    Name: EventDataStoreName
    OrganizationEnabled: Optional[Boolean] = None
    RetentionPeriod_1: Optional[RetentionPeriod] = Field(None, alias='RetentionPeriod')
    TagsList_1: Optional[TagsList] = Field(None, alias='TagsList')
    TerminationProtectionEnabled_1: Optional[TerminationProtectionEnabled] = Field(
        None, alias='TerminationProtectionEnabled'
    )


class CreateEventDataStoreResponse(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    CreatedTimestamp: Optional[Date] = None
    EventDataStoreArn_1: Optional[EventDataStoreArn] = Field(
        None, alias='EventDataStoreArn'
    )
    KmsKeyId: Optional[EventDataStoreKmsKeyId] = None
    MultiRegionEnabled: Optional[Boolean] = None
    Name: Optional[EventDataStoreName] = None
    OrganizationEnabled: Optional[Boolean] = None
    RetentionPeriod_1: Optional[RetentionPeriod] = Field(None, alias='RetentionPeriod')
    Status: Optional[EventDataStoreStatus] = None
    TagsList_1: Optional[TagsList] = Field(None, alias='TagsList')
    TerminationProtectionEnabled_1: Optional[TerminationProtectionEnabled] = Field(
        None, alias='TerminationProtectionEnabled'
    )
    UpdatedTimestamp: Optional[Date] = None


class EventDataStore(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    CreatedTimestamp: Optional[Date] = None
    EventDataStoreArn_1: Optional[EventDataStoreArn] = Field(
        None, alias='EventDataStoreArn'
    )
    MultiRegionEnabled: Optional[Boolean] = None
    Name: Optional[EventDataStoreName] = None
    OrganizationEnabled: Optional[Boolean] = None
    RetentionPeriod_1: Optional[RetentionPeriod] = Field(None, alias='RetentionPeriod')
    Status: Optional[EventDataStoreStatus] = None
    TerminationProtectionEnabled_1: Optional[TerminationProtectionEnabled] = Field(
        None, alias='TerminationProtectionEnabled'
    )
    UpdatedTimestamp: Optional[Date] = None


class EventDataStores(RootModel[List[EventDataStore]]):
    root: List[EventDataStore]


class GetEventDataStoreResponse(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    CreatedTimestamp: Optional[Date] = None
    EventDataStoreArn_1: Optional[EventDataStoreArn] = Field(
        None, alias='EventDataStoreArn'
    )
    KmsKeyId: Optional[EventDataStoreKmsKeyId] = None
    MultiRegionEnabled: Optional[Boolean] = None
    Name: Optional[EventDataStoreName] = None
    OrganizationEnabled: Optional[Boolean] = None
    RetentionPeriod_1: Optional[RetentionPeriod] = Field(None, alias='RetentionPeriod')
    Status: Optional[EventDataStoreStatus] = None
    TerminationProtectionEnabled_1: Optional[TerminationProtectionEnabled] = Field(
        None, alias='TerminationProtectionEnabled'
    )
    UpdatedTimestamp: Optional[Date] = None


class GetEventSelectorsResponse(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    EventSelectors_1: Optional[EventSelectors] = Field(None, alias='EventSelectors')
    TrailARN: Optional[String] = None


class GetImportResponse(BaseModel):
    CreatedTimestamp: Optional[Date] = None
    Destinations: Optional[ImportDestinations] = None
    EndEventTime: Optional[Date] = None
    ImportId: Optional[UUID] = None
    ImportSource_1: Optional[ImportSource] = Field(None, alias='ImportSource')
    ImportStatistics_1: Optional[ImportStatistics] = Field(
        None, alias='ImportStatistics'
    )
    ImportStatus_1: Optional[ImportStatus] = Field(None, alias='ImportStatus')
    StartEventTime: Optional[Date] = None
    UpdatedTimestamp: Optional[Date] = None


class ListEventDataStoresResponse(BaseModel):
    EventDataStores_1: Optional[EventDataStores] = Field(None, alias='EventDataStores')
    NextToken: Optional[PaginationToken] = None


class ListQueriesResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Queries_1: Optional[Queries] = Field(None, alias='Queries')


class ListTagsResponse(BaseModel):
    NextToken: Optional[String] = None
    ResourceTagList_1: Optional[ResourceTagList] = Field(None, alias='ResourceTagList')


class PutEventSelectorsRequest(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    EventSelectors_1: Optional[EventSelectors] = Field(None, alias='EventSelectors')
    TrailName: String


class PutEventSelectorsResponse(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    EventSelectors_1: Optional[EventSelectors] = Field(None, alias='EventSelectors')
    TrailARN: Optional[String] = None


class RestoreEventDataStoreResponse(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    CreatedTimestamp: Optional[Date] = None
    EventDataStoreArn_1: Optional[EventDataStoreArn] = Field(
        None, alias='EventDataStoreArn'
    )
    KmsKeyId: Optional[EventDataStoreKmsKeyId] = None
    MultiRegionEnabled: Optional[Boolean] = None
    Name: Optional[EventDataStoreName] = None
    OrganizationEnabled: Optional[Boolean] = None
    RetentionPeriod_1: Optional[RetentionPeriod] = Field(None, alias='RetentionPeriod')
    Status: Optional[EventDataStoreStatus] = None
    TerminationProtectionEnabled_1: Optional[TerminationProtectionEnabled] = Field(
        None, alias='TerminationProtectionEnabled'
    )
    UpdatedTimestamp: Optional[Date] = None


class SourceConfig(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    ApplyToAllRegions: Optional[Boolean] = None


class UpdateEventDataStoreRequest(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    EventDataStore: EventDataStoreArn
    KmsKeyId: Optional[EventDataStoreKmsKeyId] = None
    MultiRegionEnabled: Optional[Boolean] = None
    Name: Optional[EventDataStoreName] = None
    OrganizationEnabled: Optional[Boolean] = None
    RetentionPeriod_1: Optional[RetentionPeriod] = Field(None, alias='RetentionPeriod')
    TerminationProtectionEnabled_1: Optional[TerminationProtectionEnabled] = Field(
        None, alias='TerminationProtectionEnabled'
    )


class UpdateEventDataStoreResponse(BaseModel):
    AdvancedEventSelectors_1: Optional[AdvancedEventSelectors] = Field(
        None, alias='AdvancedEventSelectors'
    )
    CreatedTimestamp: Optional[Date] = None
    EventDataStoreArn_1: Optional[EventDataStoreArn] = Field(
        None, alias='EventDataStoreArn'
    )
    KmsKeyId: Optional[EventDataStoreKmsKeyId] = None
    MultiRegionEnabled: Optional[Boolean] = None
    Name: Optional[EventDataStoreName] = None
    OrganizationEnabled: Optional[Boolean] = None
    RetentionPeriod_1: Optional[RetentionPeriod] = Field(None, alias='RetentionPeriod')
    Status: Optional[EventDataStoreStatus] = None
    TerminationProtectionEnabled_1: Optional[TerminationProtectionEnabled] = Field(
        None, alias='TerminationProtectionEnabled'
    )
    UpdatedTimestamp: Optional[Date] = None


class GetChannelResponse(BaseModel):
    ChannelArn_1: Optional[ChannelArn] = Field(None, alias='ChannelArn')
    Destinations_1: Optional[Destinations] = Field(None, alias='Destinations')
    IngestionStatus_1: Optional[IngestionStatus] = Field(None, alias='IngestionStatus')
    Name: Optional[ChannelName] = None
    Source_1: Optional[Source] = Field(None, alias='Source')
    SourceConfig_1: Optional[SourceConfig] = Field(None, alias='SourceConfig')
